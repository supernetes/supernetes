// SPDX-License-Identifier: MPL-2.0
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

syntax = "proto3";

package supernetes;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "src/api/v1alpha1/node.proto";

option go_package = "module github.com/supernetes/supernetes/api/v1alpha1";

// Supernetes workload management API
service WorkloadApi {
  rpc Create (Workload) returns (WorkloadMeta);
  rpc Update (Workload) returns (google.protobuf.Empty);
  rpc Delete (WorkloadMeta) returns (google.protobuf.Empty);
  rpc Get (WorkloadMeta) returns (Workload);
  rpc GetStatus (WorkloadMeta) returns (WorkloadStatus);
  rpc List (google.protobuf.Empty) returns (stream Workload);
  rpc Logs (stream WorkloadLogRequest) returns (stream WorkloadLogChunk);
}

// metav1.ObjectMeta-style metadata description for workloads
message WorkloadMeta {
  string name = 1;
  string identifier = 2; // Unique Agent-side identifier for the workload
  map<string, string> extra = 3; // Extra metadata for debugging etc.
}

// Data description for workloads, similar to .spec in Kubernetes resource definitions
message WorkloadSpec {
  string image = 1;
  repeated string command = 2; // Container ENTRYPOINT override (optional)
  repeated string args = 3; // Container CMD override (optional)
  // Set of nodes that the workload should be attempted to be scheduled onto.
  // May be non-exhaustive, in which case the HPC-side scheduler decides.
  repeated string node_names = 4;
  // Additional HPC-runtime-specific options. Keys should be specified in their most verbose
  // form without common prefixes/suffixes, for example, as full flags without the "--" prefix.
  map<string, string> job_options = 5;
}

// Describes all states a workload can be in during its lifecycle
// Roughly corresponds to corev1.PodPhase for simpler compatibility
enum WorkloadPhase {
  Pending = 0;
  Running = 1;
  Succeeded = 2;
  Failed = 3;
  Unknown = 4;
}

// Status description for workloads, similar to .status in Kubernetes resource definitions
message WorkloadStatus {
  WorkloadPhase phase = 1;
  int64 start_time = 2; // TODO: Change to google.protobuf.Timestamp
  repeated NodeMeta nodes = 3;
}

// Workload describes a containerized HPC-deployable resource
message Workload {
  WorkloadMeta meta = 1;
  WorkloadSpec spec = 2;
  WorkloadStatus status = 3;
}

// WorkloadLogRequest is to be sent once in a Logs request to initiate log streaming for a workload
message WorkloadLogRequest {
  WorkloadMeta meta = 1; // Workload to stream logs for
  bool follow = 2; // Read current log history only or keep waiting for more lines as well
  int32 tail = 3; // When reading log history, consider only `tail` last lines
}

// WorkloadLogChunk represents a chunk of log data from a workload
message WorkloadLogChunk {
  google.protobuf.Timestamp timestamp = 1; // Timestamp of log line
  bytes line = 2; // Combined stdout and stderr
}
